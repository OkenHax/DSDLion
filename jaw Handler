
//========== Commons
integer CHANNEL;
integer giveDebug;
integer giveFeedback;
integer listenHandle;
list IDs;
key owner;

//========== Notecard
string NOTECARD="settings";
key kQuery;
integer current_notecard;
integer iLine;

//========== Tongue
list tongues;
vector rotOpen;
vector rotClose;
//==========================================================================================================================
list expressions;

integer opened;
float currentRotation;
string currentTongue;
//==========================================================================================================================
list textures;
//==========================================================================================================================
//States
integer state_enabled; //bit_list
integer state_on; //bit_list

list state_settings;//[name, tongue, rot]
integer state_current;

//===========================================================================================================================
//===========================================================================================================================

showFreeMemory(){
    integer freemem = llGetFreeMemory();
    if(llToLower( "Ü" ) == "Ü"){
        integer memory = (integer)((float)freemem * 100.0 / 16384.0);
        debug( (string)memory + "% memory free ("+(string)freemem+" Byte). LSO" );
    }else{
        integer memory = (integer)((float)freemem * 100.0 / 65536.0);
        debug( (string)memory + "% memory free ("+(string)freemem+" Byte). Mono" );
    }
}

integer getChannel(string _chan){
    if(_chan=="dynamic"){
        return -8388608-(integer)("0x"+llList2String(llParseString2List(llGetOwner(), ["-"], []), 2));
    }else return (integer)_chan;
}

debug(string s){
    if(giveDebug) llOwnerSay(s);
}
feedback(string s){
    if(giveFeedback!=0) llOwnerSay(s);
}


processCommand(string cmd, string param){ 

    list cmds=llParseString2List(llToLower(cmd), [";"], []);
    list params=llParseString2List(param, [";"], []);
    cmd=llList2String(cmds, 0);
    param=llList2String(params, 0);
    if(cmd=="channel"){
        CHANNEL=getChannel(param);
        if(listenHandle!=-1) llListenRemove(listenHandle);
        listenHandle=llListen(CHANNEL, "", NULL_KEY, "");
    }else if(cmd=="reset"){
        llResetScript();
    }else if(cmd=="id"){
        IDs=llParseString2List(param, [","], []);
    }else if(cmd=="dump"){
        llSay(CHANNEL, "hud:load:"+dumpSettings());
    }else if(cmd=="feedback"){
        if(param=="on") giveFeedback++; else giveFeedback--;
    }else if(cmd=="debug"){
        giveDebug=(param=="on");
    }else if(cmd=="prim"){
        primCtl(llList2String(cmds, 1), params);        
    }else if(cmd=="tongue"){
        tongueCtl(llList2String(cmds, 1), params);
    }else if(cmd=="expression"){
        expressionCtl(llList2String(cmds, 1), params);
    }else if(cmd=="state"){
        stateCtl(llList2String(cmds, 1), params);
    }
}
//===========================================================================================================================
//Dump
string dumpSettings(){
    
    return 
    llDumpList2String(IDs, ",")+";"+
    (string)currentRotation+";"+
    (string)(llListFindList(tongues, [currentTongue])/5);
}

//===========================================================================================================================
reloadState(integer _forced){
    integer effective=state_on & state_enabled;

    //Search
    integer i=llGetListLength(state_settings)/3;
    while(((effective&(1<<--i))==0) && (i>0));
    i=i*3;
    if(_forced || (i!=state_current)){
        state_current=i;
        string expression=llList2String(state_settings, i+1);
        expressionCtl("set", [expression]);
        integer JTEnabled=llList2Integer(state_settings, i+2);
        if(JTEnabled){ 
            opened=TRUE;
            jaw_open();
            llSetTimerEvent(0.2);
        }else{
            //jaw_end();
            llSetTimerEvent(0.0);
        }
    }
}

stateCtl(string cmd, list params){
    string name=llList2String(params, 0);
    integer index=llListFindList(state_settings, [name]);

    if(cmd=="add"){
        if(index==-1){
            index=llGetListLength(state_settings);
        }
        state_settings=llListReplaceList(state_settings, [name, llList2String(params, 1), llList2String(params, 2)=="on"], index, index+2);
        state_enabled=state_enabled|(1<<(index/3));
        state_on = state_on & (~(1<<(index/3)));


    }else if(cmd=="switch"){
        if(index!=-1){
            integer switch=(llList2String(params, 1)=="on");
            if(switch) state_on= state_on|(1<<(index/3));
                else state_on = state_on & (~(1<<(index/3)));
            reloadState(FALSE);
        }

    }else if(cmd=="enable"){
        if(index!=-1){
            integer switch=(llList2String(params, 1)=="on");
            if(switch) state_enabled= state_enabled|(1<<(index/3));
                else state_enabled = state_enabled & (~(1<<(index/3)));
            reloadState(FALSE);
        }
    }else if(cmd=="rotation"){
        if(index!=-1){
            string expression=llList2String(state_settings, index+1);
            expressionCtl("rotation", [expression, llList2String(params, 1)]);
            reloadState(TRUE);   
        }
    }else if(cmd=="tongue"){
        if(index!=-1){
            string expression=llList2String(state_settings, index+1);
            expressionCtl("tongue", [expression, llList2String(params, 1)]);
            //reloadState(TRUE);   
        }
    
    }else if(cmd=="expression"){
        if(index!=-1){
            string expression=llList2String(state_settings, index+1); 
            integer indexExp=llListFindList(expressions, [expression]);
            cmd=llList2String(params, 1);
            
            indexExp=llListFindList(expressions, [cmd]);

            state_enabled= state_enabled|(1<<(index/3));

            if(indexExp!=-1){
                expression=llList2String(expressions, indexExp);
                state_settings=llListReplaceList(state_settings, [expression], index+1, index+1);
                feedback("setting expression "+expression+" for "+name+" state");
            }
            reloadState(TRUE);
        }
    }
}


//===========================================================================================================================
primCtl(string cmd, list params){
    string name=llList2String(params, 0);
    integer face=-1;
    list tmp=llParseString2List(name, ["."], []);
    if(llGetListLength(tmp)>1){
        name=llList2String(tmp, 0);
        face=llList2Integer(tmp, 1);
    }

    integer i=llGetNumberOfPrims()+1;
    integer len=llStringLength(name);

    if(cmd=="alpha"){
        float alpha=llList2Float(params, 1);
        while(--i>=0){
            if(llGetSubString(llGetLinkName(i), 0, len-1)==name){
                llSetLinkAlpha(i, alpha, face);
            }
        }
    }else if(cmd=="color"){
        vector color=llList2Vector(params, 1);
        while(--i>=0){
            if(llGetSubString(llGetLinkName(i), 0, len-1)==name){
                llSetLinkColor(i, color, face);
            }
        }
    }else if(cmd=="texture"){
        integer index=llListFindList(textures, [llList2String(params, 1)]);
        list tmp;
        if(index!=-1){
            tmp=[(key)llList2String(textures, index+1), //texture
                 (vector)llList2String(textures, index+2),//repeat
                 (vector)llList2String(textures, index+3),//offset
                 llList2Float(textures, index+4)]; //rot
            while(i>=0){
                if(llGetSubString(llGetLinkName(i), 0, len-1)==name){
                    llSetLinkPrimitiveParamsFast(i, [PRIM_TEXTURE, face]+tmp);
                }
                --i;
            }
        }else{        
            key uuid=llList2String(params, 1);
            while(i>=0){
                if(llGetSubString(llGetLinkName(i), 0, len-1)==name){
                    llSetLinkTexture(i, uuid, face);
                }
                --i;
            }
        }
    }
}

//===========================================================================================================================
tongueCtl(string cmd, list params){
    string name=llList2String(params, 0);
    integer index=llListFindList(tongues, [name]);   
    if(cmd=="add"){ 
        if(index==-1){
            index=llGetListLength(tongues);
        }
        tongues=llListReplaceList(tongues, llList2List(params, 0, 5), index, index+5);
    }else if(cmd=="del"){
        if(index!=-1){
            tongues=llDeleteSubList(tongues, index, index+5);
        } 
    }else if(cmd=="set"){
        if(index!=-1){
            integer currentIndex=llListFindList(tongues, [currentTongue]);
            if(currentIndex!=-1){
                primCtl("alpha", [llList2String(tongues, currentIndex+1), 0.0]);//Hide previou prim
            }
            currentTongue=name;
            primCtl("alpha", [llList2String(tongues, index+1), 1.0]);//Hide previou prim
            vector scale=llGetScale();
            
            vector pos=(vector)llList2String(tongues, index+3);
            pos=<pos.x*scale.x, pos.y*scale.x, pos.z*scale.z>;
            
            vector size=(vector)llList2String(tongues, index+2);
            size=<size.x*scale.x, size.y*scale.x, size.z*scale.z>;
            rotation rot=llEuler2Rot((vector)llList2String(tongues, index+4)*DEG_TO_RAD);
            
            name="tongue";
            integer i=llGetNumberOfPrims()+1;
            while(--i>=0){
                if(llGetLinkName(i)==name){
                    llSetLinkPrimitiveParamsFast(i, [
                        PRIM_POS_LOCAL , pos,
                        PRIM_SIZE, size,
                        PRIM_ROT_LOCAL, rot]);
                }
            }
        }
    }
}

//===========================================================================================================================
expressionCtl(string cmd, list params){
    string name=llList2String(params, 0);
    integer index=llListFindList(expressions, [name]);  
    if(cmd=="add"){ 
        if(index==-1){
            index=llGetListLength(expressions);
        }
        expressions=llListReplaceList(expressions, llList2List(params, 0, 2), index, index+2);
    }else if(cmd=="del"){
        if(index!=-1){
            expressions=llDeleteSubList(expressions, index, index+2);
        }
    }else if(cmd=="set"){
        if(index!=-1){
            tongueCtl("set", [llList2String(expressions, index+1)]);
            setRotation(llList2Float(expressions, index+2));
        }
    }else if(cmd=="tongue"){
        if(index!=-1){
            string tongue=llList2String(expressions, index+1);
            integer indexTg=llListFindList(tongues, [tongue]);
            
            cmd=llList2String(params, 1);
            if(cmd=="next"){
                indexTg=(indexTg+5)%llGetListLength(tongues);
            }else if(cmd=="prev"){
                indexTg=indexTg-5;
                if(indexTg<0) indexTg=llGetListLength(tongues)-5;
            }else{
                indexTg=llListFindList(tongues, [cmd]);
            }     
            if(indexTg!=-1){
                tongue=llList2String(tongues, indexTg);
                expressions=llListReplaceList(expressions, [tongue], index+1, index+1);   
                feedback("setting tongue "+tongue+" for "+name+" expression");                   
            }    
            reloadState(TRUE); 
        }
    }else if(cmd=="constraints"){
         rotClose=(vector)llList2String(params, 0);
         rotOpen=(vector)llList2String(params, 1);

    }else if(cmd=="rotation"){
        if(index!=-1){
            cmd=llList2String(params, 1);
            if(cmd=="inc"){
                currentRotation+=0.2;
            }else if(cmd=="dec"){
                currentRotation-=0.2;
            }else{
                currentRotation=llList2Float(params, 1);
            }
            if(currentRotation>1.0) currentRotation=1.0;
            if(currentRotation<0.0) currentRotation=0.0;
            
            expressions=llListReplaceList(expressions, [currentRotation], index+2, index+2);   
            //reloadState(TRUE); 
        }
    }
}

//===========================================================================================================================
setRotation(float rot){
    vector v=rotOpen-rotClose;
    v=rotClose+<v.x*rot, v.y*rot, v.z*rot>;
    currentRotation=rot;
    
    vector vForced=v;
    vForced.y+=6.0;
    
    llSetRot(llEuler2Rot(vForced * DEG_TO_RAD));
    llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_ROT_LOCAL, llEuler2Rot(v * DEG_TO_RAD)]);
    //llSetRot(llEuler2Rot(v * DEG_TO_RAD));    
}
//===========================================================================================================================
jaw_open(){
    float openY=10.0;

    vector open=<rotOpen.x, openY+llFrand(rotOpen.y-openY), rotOpen.z>;
    llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_ROT_LOCAL, llEuler2Rot(open * DEG_TO_RAD)]);
}

jaw_close(){
    vector v=rotOpen-rotClose;
    v=rotClose+<v.x*currentRotation, v.y*currentRotation, v.z*currentRotation>;
    llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_ROT_LOCAL, llEuler2Rot(v * DEG_TO_RAD)]);
}

jaw_end(){
    if(!opened) jaw_open();
    opened=FALSE;
    setRotation(currentRotation);
}


//===========================================================================================================================
//===========================================================================================================================

default
{
    state_entry(){
        owner=llGetOwner();
        kQuery = llGetNotecardLine(llGetScriptName()+"_"+NOTECARD, iLine);
    }

    changed(integer change){
        if(change & CHANGED_OWNER) llResetScript();
        if(change & CHANGED_INVENTORY) llResetScript(); 
    }
    
    dataserver(key query_id, string data){
        if(query_id == kQuery){
            if(data == EOF){
                ++current_notecard;
                string note=llGetScriptName()+"_"+NOTECARD+(string)current_notecard;
                if(llGetInventoryType(note)!=INVENTORY_NONE){
                    kQuery = llGetNotecardLine(note, iLine=0);
                }else{
                    state run;
                }
            }else{
                ++iLine;
                if(current_notecard!=0){
                    kQuery = llGetNotecardLine(llGetScriptName()+"_"+NOTECARD+(string)current_notecard, iLine);
                }else{
                    kQuery = llGetNotecardLine(llGetScriptName()+"_"+NOTECARD, iLine);
                }

                data=llStringTrim(data, STRING_TRIM);
                if(llGetSubString(data, 0,0)!="#"){
                    list l=llParseString2List(data, [":"], []);
                    processCommand(llList2String(l, 0), llList2String(l, 1));
                }
            }
        }
    }
}
//===========================================================================================================================
state run
{
    state_entry(){
        listenHandle=llListen(CHANNEL, "", NULL_KEY, "");
        reloadState(TRUE);
        jaw_end();
        
        stateCtl("switch", ["default", "on"]);
        opened=FALSE;
        showFreeMemory();          
    }

    timer(){
        if(opened=!opened) jaw_open();
            else jaw_close();
    }
    
    changed(integer change){
        if(change&CHANGED_OWNER) llResetScript();
        if(change&CHANGED_LINK) llResetScript();
        if(change&CHANGED_INVENTORY) llResetScript();    
    }
    

    listen(integer channel, string name, key _id, string message){
        if(llGetOwnerKey(_id)==owner){
            list temp=llParseString2List(llStringTrim(message, STRING_TRIM), [":"], []);
            if(llListFindList(IDs, [llList2String(temp, 0)])!=-1){
                processCommand(llList2String(temp, 1), llList2String(temp, 2));
            }
        }
    }
}
